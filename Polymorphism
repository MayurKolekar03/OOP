Run time Polymorphism

#include<iostream>

using namespace std;

class base

{

public:

virtual void print ()

{ cout<< "print base class" <<endl; }

void show ()

{ cout<< "show base class" <<endl; }

};

class derived:public base

{

public:

void print ()

{ cout<< "print derived class" <<endl; }

void show ()

{ cout<< "show derived class" <<endl; }

};

int main()

{

base *bptr;
derived d;

bptr = &d;

bptr->print();

bptr->show();

return 0;

}



Compile time Polymorphism


#include <bits/stdc++.h>
using namespace std;
class demo {
public:
void func(int x)
{
cout << "value of x is " << x << endl;
}
void func(double x)
{
cout << "value of x is " << x << endl;
}
void func(int x, int y)

{

cout << "value of x and y is " << x << ", " << y

<< endl;

}

};
int main()

{
demo obj1;
obj1.func(7);
obj1.func(9.132);
obj1.func(85, 64);

return 0;

}
